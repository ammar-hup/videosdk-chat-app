<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VideoSDK Web Chat</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🎥</text></svg>">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
            height: 100vh;
            overflow: hidden;
        }
        
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                        radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.15) 0%, transparent 50%),
                        radial-gradient(circle at 40% 40%, rgba(120, 219, 226, 0.1) 0%, transparent 50%);
            pointer-events: none;
        }
        
        .container {
            background: rgba(255, 255, 255, 0.03);
            -webkit-backdrop-filter: blur(20px);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 24px;
            box-shadow: 
                0 8px 32px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.1),
                0 0 0 1px rgba(255, 255, 255, 0.05);
            padding: 48px;
            max-width: 900px;
            width: 100%;
            text-align: center;
            position: relative;
            z-index: 1;
        }
        
        .header {
            margin-bottom: 48px;
        }
        
        h1 {
            background: linear-gradient(135deg, #fff 0%, #e0e0e0 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 16px;
            font-size: clamp(2rem, 4vw, 3.5rem);
            font-weight: 700;
            letter-spacing: -0.02em;
            line-height: 1.1;
        }
        
        .subtitle {
            color: rgba(255, 255, 255, 0.7);
            font-size: 1.1rem;
            font-weight: 400;
            margin-bottom: 32px;
        }
        
        .meeting-info {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.4);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 6px 10px;
            border-radius: 10px;
            z-index: 10;
            display: flex;
            align-items: center;
            gap: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            max-width: 250px;
        }
        
        .meeting-info::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 1px;
            background: linear-gradient(90deg, transparent, #7c3aed 20%, #06b6d4 50%, #10b981 80%, transparent);
            border-radius: 1px;
        }
        
        .info-grid {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: 12px;
            margin: 0;
        }
        
        .info-item {
            background: none;
            padding: 0;
            border-radius: 0;
            border: none;
            text-align: left;
            min-width: 100px;
        }
        
        .info-label {
            color: rgba(255, 255, 255, 0.4);
            font-size: 0.6rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-bottom: 1px;
        }
        
        .info-value {
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .video-container {
            margin: 0;
            position: relative;
            width: 100%;
        }
        
        .video-wrapper {
            background: linear-gradient(135deg, #1e1e2e 0%, #2a2a3e 100%);
            border-radius: 16px;
            overflow: hidden;
            position: relative;
            aspect-ratio: 16/9;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 
                0 20px 40px rgba(0, 0, 0, 0.4),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            max-width: 100%;
            width: 100%;
            height: calc(100vh - 250px);
            min-height: 300px;
            max-height: 600px;
        }
        
        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 16px;
        }
        
        .video-label {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 500;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .remote-video {
            margin-top: 20px;
            height: 240px;
            aspect-ratio: 16/9;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 16px;
            flex-wrap: wrap;
            margin: 40px 0 0 0;
        }
        
        button {
            position: relative;
            background: rgba(255, 255, 255, 0.05);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            color: rgba(255, 255, 255, 0.9);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 14px 28px;
            border-radius: 12px;
            cursor: pointer;
            font-size: 0.95rem;
            font-weight: 500;
            font-family: inherit;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            min-width: 140px;
            overflow: hidden;
        }
        
        button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.5s;
        }
        
        button:hover::before {
            left: 100%;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            border-color: rgba(255, 255, 255, 0.2);
            background: rgba(255, 255, 255, 0.1);
        }
        
        button:active {
            transform: translateY(0);
        }
        
        button.primary {
            background: linear-gradient(135deg, #7c3aed, #6366f1);
            border-color: rgba(124, 58, 237, 0.5);
            color: white;
        }
        
        button.primary:hover {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            box-shadow: 0 8px 25px rgba(124, 58, 237, 0.4);
        }
        
        button.danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            border-color: rgba(239, 68, 68, 0.5);
            color: white;
        }
        
        button.danger:hover {
            background: linear-gradient(135deg, #f87171, #ef4444);
            box-shadow: 0 8px 25px rgba(239, 68, 68, 0.4);
        }
        
        button:disabled {
            background: rgba(255, 255, 255, 0.02);
            border-color: rgba(255, 255, 255, 0.05);
            color: rgba(255, 255, 255, 0.3);
            cursor: not-allowed;
            transform: none;
        }
        
        button:disabled::before {
            display: none;
        }
        
        .status {
            padding: 16px 24px;
            margin: 32px 0;
            border-radius: 12px;
            font-weight: 500;
            font-size: 0.95rem;
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            border: 1px solid;
            position: relative;
            overflow: hidden;
        }
        
        .status::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 2px;
            border-radius: 1px;
        }
        
        .status.connecting {
            background: rgba(251, 191, 36, 0.1);
            color: #fbbf24;
            border-color: rgba(251, 191, 36, 0.2);
        }
        
        .status.connecting::before {
            background: linear-gradient(90deg, #fbbf24, #f59e0b);
        }
        
        .status.connected {
            background: rgba(16, 185, 129, 0.1);
            color: #10b981;
            border-color: rgba(16, 185, 129, 0.2);
        }
        
        .status.connected::before {
            background: linear-gradient(90deg, #10b981, #059669);
        }
        
        .status.error {
            background: rgba(239, 68, 68, 0.1);
            color: #ef4444;
            border-color: rgba(239, 68, 68, 0.2);
        }
        
        .status.error::before {
            background: linear-gradient(90deg, #ef4444, #dc2626);
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .container {
                padding: 32px 24px;
                margin: 20px;
            }
            
            .info-grid {
                gap: 20px;
            }
            
            .controls {
                gap: 12px;
            }
            
            button {
                min-width: 120px;
                padding: 12px 20px;
                font-size: 0.9rem;
            }
        }
        
        @media (max-width: 480px) {
            .info-grid {
                flex-direction: column;
                gap: 16px;
            }
            
            .meeting-info {
                padding: 16px;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            button {
                width: 100%;
                max-width: 280px;
            }
        }
    </style>
</head>
<body>
    <!-- The VideoSDK will create its UI in this container -->
    <div id="videoSDKContainer" style="width: 100%; height: 100vh;"></div>

    <!-- Load the VideoSDK Prebuilt SDK -->
    <script src="https://sdk.videosdk.live/rtc-js-prebuilt/0.3.31/rtc-js-prebuilt.js"></script>
    <script>
        // Check if we're running through ngrok
        const isNgrok = window.location.hostname.includes('ngrok');
        
        // Configuration - replace with your actual values
        const API_KEY = "07ab89f3-150b-442d-8c0b-711133e64753";
        const MEETING_ID = "test-room-123";
        // Generate a random user ID and name to distinguish participants
        const USER_ID = "user_" + Math.floor(Math.random() * 10000);
        const NAME = isNgrok ? 
            "Ngrok User " + Math.floor(Math.random() * 100) : 
            "Local User " + Math.floor(Math.random() * 100);
        
        // You'll need to generate this token server-side in production
        // Use generate_token.py to create a fresh token
        const TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlrZXkiOiIwN2FiODlmMy0xNTBiLTQ0MmQtOGMwYi03MTExMzNlNjQ3NTMiLCJwZXJtaXNzaW9ucyI6WyJhbGxvd19qb2luIl0sImlhdCI6MTc1MzE3MjAxMywiZXhwIjoxNzUzMjU4NDEzfQ.FIUDTmOUMGVgOqa7zQ4hePZt4_Ouckni84HGzgHvsU4";
        
        // Log connection details to help with debugging
        console.log(`Connection mode: ${isNgrok ? 'Ngrok (Public)' : 'Local'}`);
        console.log(`User ID: ${USER_ID}, Name: ${NAME}`);
        
        // Initialize the VideoSDK Prebuilt meeting on page load
        window.addEventListener('load', function() {
            const domain = "sdk.videosdk.live";

        // Update UI to show participant info
        function updateParticipantInfo() {
            // Update the info-value with our name
            const participantInfoEl = document.querySelector('.info-item:nth-child(2) .info-value');
            if (participantInfoEl) {
                participantInfoEl.textContent = NAME;
            }
        }
        
        // Function to handle new participant
        function handleParticipantJoined(participant) {
            console.log("Participant joined:", participant.id);
            remoteParticipants[participant.id] = participant;
            
            // Listen for stream from this participant
            participant.on('stream-added', (stream) => {
                // Create a new video element for this participant
                addRemoteVideo(participant.id, stream, participant.displayName);
            });
        }

        // Add remote video to the UI
        function addRemoteVideo(participantId, stream, displayName) {
            // Create container for remote video if not exists
            if (!document.getElementById(`remote-${participantId}`)) {
                const remoteVideoContainer = document.createElement('div');
                remoteVideoContainer.className = 'video-wrapper remote-video';
                remoteVideoContainer.id = `remote-container-${participantId}`;
                remoteVideoContainer.style.marginTop = '20px';
                
                const remoteVideo = document.createElement('video');
                remoteVideo.id = `remote-${participantId}`;
                remoteVideo.autoplay = true;
                remoteVideo.playsInline = true;
                
                const remoteLabel = document.createElement('div');
                remoteLabel.className = 'video-label';
                remoteLabel.textContent = displayName || `Remote User`;
                
                remoteVideoContainer.appendChild(remoteVideo);
                remoteVideoContainer.appendChild(remoteLabel);
                
                document.getElementById('videoContainer').appendChild(remoteVideoContainer);
                
                // Attach stream to video element
                remoteVideo.srcObject = stream;
            }
        }
        
        // Remove a remote video from UI
        function removeRemoteVideo(participantId) {
            const container = document.getElementById(`remote-container-${participantId}`);
            if (container) {
                container.remove();
            }
        }
        
        // Meeting functions
        async function joinMeeting() {
            try {
                updateStatus('Connecting to meeting...', 'connecting');
                updateParticipantInfo();
                
                // Check if the prebuilt SDK is available
                if (typeof VideoSDKMeeting === 'undefined') {
                    console.error("VideoSDKMeeting is not defined - SDK didn't load properly");
                    await setupManualWebRTC();
                    return;
                }
                
                // Get local media access before configuring the meeting
                try {
                    localStream = await navigator.mediaDevices.getUserMedia({ 
                        video: true, 
                        audio: true 
                    });
                    
                    // Display local video right away
                    const localVideo = document.getElementById('localVideo');
                    localVideo.srcObject = localStream;
                } catch (err) {
                    console.error("Error accessing camera/mic:", err);
                    updateStatus('Error accessing camera/microphone. Check permissions.', 'error');
                    return;
                }
                
                // Configure options for the VideoSDK prebuilt client
                const config = {
                    name: NAME,
                    meetingId: MEETING_ID,
                    apiKey: API_KEY,
                    
                    containerId: null,
                    micEnabled: true,
                    webcamEnabled: true,
                    participantId: USER_ID,
                    
                    // Add STUN servers to help with NAT traversal (especially for ngrok)
                    maxResolution: "hd",
                    debug: true,
                    joinWithoutUserInteraction: true,
                    
                    // Use the token for authentication
                    token: TOKEN
                };
                
                console.log("Creating meeting with config:", config);
                
                try {
                    // Use the correct constructor from the prebuilt SDK
                    meeting = new VideoSDKMeeting();
                    rtcClient = meeting;
                    
                    // Configure the meeting
                    meeting.init(config);
                    
                    console.log("Meeting initialized successfully");
                    
                    // Join the meeting
                    await meeting.join();
                
                    // Set up event handlers for the meeting
                    meeting.on("meeting-joined", () => {
                        console.log("Meeting joined successfully!");
                        updateStatus('Connected to meeting', 'connected');
                        isJoined = true;
                        
                        // Enable controls
                        document.getElementById('joinBtn').disabled = true;
                        document.getElementById('leaveBtn').disabled = false;
                        document.getElementById('toggleMic').disabled = false;
                        document.getElementById('toggleVideo').disabled = false;
                    });
                    
                    meeting.on("meeting-left", () => {
                        console.log("Meeting left");
                        updateStatus('Left meeting', 'connecting');
                        isJoined = false;
                    });
                    
                    // When a participant joins
                    meeting.on("participant-joined", (participant) => {
                        console.log("New participant joined:", participant);
                        remoteParticipants[participant.id] = participant;
                        
                        // Listen for stream
                        participant.on("stream-enabled", (stream) => {
                            console.log("Participant stream enabled:", stream);
                            addRemoteVideo(participant.id, stream, participant.displayName);
                        });
                    });
                    
                    // When a participant leaves
                    meeting.on("participant-left", (participant) => {
                        console.log("Participant left:", participant.id);
                        removeRemoteVideo(participant.id);
                        delete remoteParticipants[participant.id];
                    });
                    
                    // Handle errors
                    meeting.on("error", (error) => {
                        console.error("Meeting error:", error);
                        updateStatus(`Error: ${error.message || 'Unknown error'}`, 'error');
                    });
                    
                    console.log("Meeting joined and events registered");
                } catch (error) {
                    console.error("Error initializing meeting:", error);
                    
                    // Fall back to manual WebRTC mode if VideoSDK initialization fails
                    if (localStream) {
                        // We already have local stream from earlier
                        window.manualWebRTCMode = true;
                        
                        // Enable controls
                        document.getElementById('joinBtn').disabled = true;
                        document.getElementById('leaveBtn').disabled = false;
                        document.getElementById('toggleMic').disabled = false;
                        document.getElementById('toggleVideo').disabled = false;
                        
                        updateStatus('Using fallback mode (local video only)', 'connected');
                        isJoined = true;
                    } else {
                        await setupManualWebRTC();
                    }
                }
                
            } catch (error) {
                console.error('Error joining meeting:', error);
                updateStatus('Error: ' + (error.message || 'Failed to join meeting'), 'error');
            }
        }
        
        function leaveMeeting() {
            try {
                if (window.manualWebRTCMode) {
                    // Clean up manual WebRTC resources
                    if (localStream) {
                        localStream.getTracks().forEach(track => track.stop());
                        localStream = null;
                    }
                } else if (meeting && typeof meeting.leave === 'function') {
                    // Use SDK's leave method
                    try {
                        meeting.leave();
                        console.log("Meeting left via SDK method");
                    } catch (err) {
                        console.warn("Error using SDK leave method, using manual cleanup:", err);
                        if (localStream) {
                            localStream.getTracks().forEach(track => track.stop());
                        }
                    }
                } else if (localStream) {
                    // Just clean up the media tracks as fallback
                    localStream.getTracks().forEach(track => track.stop());
                }
                
                // Clean up video elements
                const localVideo = document.getElementById('localVideo');
                if (localVideo) {
                    if (localVideo.srcObject) {
                        const tracks = localVideo.srcObject.getTracks();
                        tracks.forEach(track => track.stop());
                    }
                    localVideo.srcObject = null;
                }
                
                // Remove all remote videos
                Object.keys(remoteParticipants).forEach(participantId => {
                    removeRemoteVideo(participantId);
                });
                remoteParticipants = {};
                
                // Reset controls
                document.getElementById('joinBtn').disabled = false;
                document.getElementById('leaveBtn').disabled = true;
                document.getElementById('toggleMic').disabled = true;
                document.getElementById('toggleVideo').disabled = true;
                
                // Reset state
                window.manualWebRTCMode = false;
                rtcClient = null;
                meeting = null;
                localStream = null;
                isJoined = false;
                
                updateStatus('Left meeting', 'connecting');
            } catch (error) {
                console.error('Error leaving meeting:', error);
                updateStatus('Error: ' + (error.message || 'Failed to leave meeting'), 'error');
                
                // Even if there's an error, try to clean up resources
                if (localStream) {
                    localStream.getTracks().forEach(track => track.stop());
                    localStream = null;
                }
            }
        }
        
        function toggleMic() {
            try {
                if (window.manualWebRTCMode && localStream) {
                    // Manual WebRTC mode
                    const audioTrack = localStream.getAudioTracks()[0];
                    if (audioTrack) {
                        audioTrack.enabled = !audioTrack.enabled;
                        const btn = document.getElementById('toggleMic');
                        btn.textContent = audioTrack.enabled ? '🎤 Mute' : '🔇 Unmute';
                    }
                } else if (meeting && meeting.unmuteMic && meeting.muteMic) {
                    // VideoSDKMeeting interface (prebuilt)
                    const isMuted = meeting.isMicMuted();
                    if (isMuted) {
                        meeting.unmuteMic();
                    } else {
                        meeting.muteMic();
                    }
                    
                    const btn = document.getElementById('toggleMic');
                    btn.textContent = !isMuted ? '🎤 Mute' : '🔇 Unmute';
                } else if (localStream) {
                    // Fallback to direct media track manipulation
                    const audioTrack = localStream.getAudioTracks()[0];
                    if (audioTrack) {
                        audioTrack.enabled = !audioTrack.enabled;
                        const btn = document.getElementById('toggleMic');
                        btn.textContent = audioTrack.enabled ? '🎤 Mute' : '🔇 Unmute';
                    }
                }
            } catch (error) {
                console.error("Error toggling mic:", error);
                // Fallback to direct manipulation if SDK method fails
                if (localStream) {
                    const audioTrack = localStream.getAudioTracks()[0];
                    if (audioTrack) {
                        audioTrack.enabled = !audioTrack.enabled;
                        const btn = document.getElementById('toggleMic');
                        btn.textContent = audioTrack.enabled ? '🎤 Mute' : '🔇 Unmute';
                    }
                }
            }
        }
        
        function toggleVideo() {
            try {
                if (window.manualWebRTCMode && localStream) {
                    // Manual WebRTC mode
                    const videoTrack = localStream.getVideoTracks()[0];
                    if (videoTrack) {
                        videoTrack.enabled = !videoTrack.enabled;
                        const btn = document.getElementById('toggleVideo');
                        btn.textContent = videoTrack.enabled ? '📹 Stop Video' : '📹 Start Video';
                    }
                } else if (meeting && meeting.enableWebcam && meeting.disableWebcam) {
                    // VideoSDKMeeting interface (prebuilt)
                    const isWebcamOn = meeting.isWebcamOn();
                    if (isWebcamOn) {
                        meeting.disableWebcam();
                    } else {
                        meeting.enableWebcam();
                    }
                    
                    const btn = document.getElementById('toggleVideo');
                    btn.textContent = isWebcamOn ? '📹 Start Video' : '📹 Stop Video';
                } else if (localStream) {
                    // Fallback to direct media track manipulation
                    const videoTrack = localStream.getVideoTracks()[0];
                    if (videoTrack) {
                        videoTrack.enabled = !videoTrack.enabled;
                        const btn = document.getElementById('toggleVideo');
                        btn.textContent = videoTrack.enabled ? '📹 Stop Video' : '📹 Start Video';
                    }
                }
            } catch (error) {
                console.error("Error toggling video:", error);
                // Fallback to direct manipulation if SDK method fails
                if (localStream) {
                    const videoTrack = localStream.getVideoTracks()[0];
                    if (videoTrack) {
                        videoTrack.enabled = !videoTrack.enabled;
                        const btn = document.getElementById('toggleVideo');
                        btn.textContent = videoTrack.enabled ? '📹 Stop Video' : '📹 Start Video';
                    }
                }
            }
        }
        
        // Function to check WebRTC capabilities
        function checkWebRTCSupport() {
            let supportDetails = [];
            
            // Check for getUserMedia
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                supportDetails.push("✅ getUserMedia supported");
            } else {
                supportDetails.push("❌ getUserMedia NOT supported");
            }
            
            // Check for RTCPeerConnection
            if (window.RTCPeerConnection) {
                supportDetails.push("✅ RTCPeerConnection supported");
            } else {
                supportDetails.push("❌ RTCPeerConnection NOT supported");
            }
            
            return supportDetails;
        }
        
        // Fallback function to handle WebRTC directly if the SDK fails
        async function setupManualWebRTC() {
            updateStatus('Setting up manual WebRTC (SDK unavailable)', 'connecting');
            
            try {
                // Get local media stream
                localStream = await navigator.mediaDevices.getUserMedia({ 
                    video: true, 
                    audio: true 
                });
                
                // Display local video
                const localVideo = document.getElementById('localVideo');
                localVideo.srcObject = localStream;
                
                // Enable controls as if we were connected
                document.getElementById('joinBtn').disabled = true;
                document.getElementById('leaveBtn').disabled = false;
                document.getElementById('toggleMic').disabled = false;
                document.getElementById('toggleVideo').disabled = false;
                
                updateStatus('Connected with manual WebRTC (no remote connections)', 'connected');
                isJoined = true;
                
                // Since we're not using the SDK, we need to implement our own versions
                // of the mic and webcam controls
                window.manualWebRTCMode = true;
                
                console.log("Manual WebRTC mode active - remote connections won't work without the SDK");
            } catch (error) {
                console.error("Manual WebRTC setup failed:", error);
                updateStatus('Failed to access camera/microphone', 'error');
            }
        }
        
        // Initialize on page load
        window.addEventListener('load', function() {
            // Add connection info to status for easy debugging
            const connectionMode = isNgrok ? 'Ngrok (Public)' : 'Local';
            const browserInfo = `${navigator.userAgent.match(/chrome|firefox|safari|edge|opera/i)?.[0] || 'Unknown'}`;
            const webrtcInfo = checkWebRTCSupport();
            
            console.log(`Environment: ${connectionMode} / ${browserInfo}`);
            console.log(`WebRTC support:`, webrtcInfo);
            
            // Check if SDK script loaded properly
            const scriptLoaded = document.querySelector('script[src*="videosdk"]')?.loaded;
            if (!scriptLoaded) {
                console.warn("VideoSDK script may not have loaded properly. Trying to handle errors gracefully.");
            }
            
            updateStatus(`Ready to connect... (${connectionMode} / ${browserInfo})`, 'connecting');
            
            // Update participant info right away
            updateParticipantInfo();
            
            // Add connection details to help with troubleshooting
            if (isNgrok) {
                console.log("📝 NGROK MODE: For best results, ensure both devices use the ngrok URL");
            }
            
            // Add listener for unhandled errors
            window.addEventListener('error', function(event) {
                console.error("Caught unhandled error:", event.error);
                if (event.error?.message?.includes("VideoSDK is not defined")) {
                    alert("VideoSDK library failed to load properly. The app will try to use a fallback method, but not all features will work.");
                }
            });
        });
    </script>
</body>
</html>
